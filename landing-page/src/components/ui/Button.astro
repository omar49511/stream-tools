---
// src/components/ui/Button.astro

type Variant =
  | "default"
  | "destructive"
  | "outline"
  | "secondary"
  | "ghost"
  | "link"
  | "hero"
  | "cta";

type Size = "default" | "sm" | "lg" | "icon";

interface ButtonProps {
  variant?: Variant;
  size?: Size;
  asChild?: boolean;
  className?: string;
  href?: string;
  target?: string;
  rel?: string;
  [key: string]: any; // para props adicionales
}

const { 
  variant = "default" , 
  size = "default", 
  asChild = false, 
  className = "",
  href,
  target,
  rel,
  ...props 
} = Astro.props as ButtonProps;

// Definimos las clases para cada variante
const variantClasses = {
  default: "bg-primary text-primary-foreground hover:bg-primary/90 shadow-red transition-smooth",
  destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
  outline: "border border-primary/30 bg-transparent text-primary hover:bg-primary/10 hover:shadow-glow transition-smooth",
  secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  ghost: "hover:bg-accent hover:text-accent-foreground",
  link: "text-primary underline-offset-4 hover:underline",
  hero: "bg-gradient-primary text-primary-foreground hover:shadow-glow transform hover:-translate-y-0.5 transition-smooth font-semibold",
  cta: "bg-primary text-primary-foreground hover:bg-primary hover:shadow-red transform hover:scale-105 transition-smooth",
};

// Definimos las clases para cada tamaño
const sizeClasses = {
  default: "h-10 px-4 py-2",
  sm: "h-9 rounded-md px-3",
  lg: "h-11 rounded-md px-8",
  icon: "h-10 w-10",
};

// Clases base que siempre se aplican
const baseClasses = "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0";

// Combinamos todas las clases
const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;
---

{/* Renderizamos un enlace si se proporciona href, de lo contrario un botón */}
{href ? (
  <a 
    href={href} 
    target={target} 
    rel={rel} 
    class={buttonClasses} 
    {...props}
  >
    <slot />
  </a>
) : asChild ? (
  <slot class={buttonClasses} {...props} />
) : (
  <button class={buttonClasses} {...props}>
    <slot />
  </button>
)}